type Query {
    customerOfId(id: ID!): Customer
    partnerOfId(id: ID!): Partner
}

type Mutation {
    createCustomer(input: CustomerInput): Customer!
    createEvent(input: EventInput): Event!
    subscribeCustomerToEvent(input: SubscribeInput): Subscription!
    createPartner(input: PartnerInput): Partner!
}

type Customer {
    id: ID
    name: String
    email: String
    cpf: String
}

input CustomerInput {
    name: String
    email: String
    cpf: String
}

type Event {
    id: ID!
    name: String!
    date: String!
    totalSpots: Int!
}

input EventInput {
    name: String
    date: String
    totalSpots: Int
    partnerId: ID
}

type Partner {
    id: ID
    name: String
    email: String
    cnpj: String
}

input PartnerInput {
    name: String
    email: String
    cnpj: String
}

type Subscription {
    eventId: ID
    ticketStatus: String
    reservationDate: String
}

input SubscribeInput {
    eventId: ID
    customerId: ID
}